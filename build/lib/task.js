// Generated by CoffeeScript 1.3.3
(function() {
  var Task,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Task = (function() {

    function Task(task) {
      this.started_seqs = __bind(this.started_seqs, this);

      this.started = __bind(this.started, this);

      this.start = __bind(this.start, this);

      this.seq = __bind(this.seq, this);

      this.req = __bind(this.req, this);

      this.par = __bind(this.par, this);

      this.link = __bind(this.link, this);

      this.is_req = __bind(this.is_req, this);

      this.completed = __bind(this.completed, this);

      this._start_seqs = __bind(this._start_seqs, this);

      this._start_link_seqs = __bind(this._start_link_seqs, this);

      this._next = __bind(this._next, this);
      this._started = false;
      this._completed = false;
      this._started_seqs = false;
      this._links = [];
      this._pars = [];
      this._reqs = [];
      this._seqs = [];
      if (!(task != null)) {
        task = function(next) {
          return next();
        };
      } else if (task instanceof Task) {
        this.seq(task);
        task = function(next) {
          return next();
        };
      }
      this._fn = task;
    }

    Task.prototype._next = function() {
      this._completed = true;
      return this._start_seqs();
    };

    Task.prototype._start_link_seqs = function() {
      var link, _i, _len, _ref, _results;
      _ref = this._links;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        link = _ref[_i];
        _results.push(link._start_seqs());
      }
      return _results;
    };

    Task.prototype._start_seqs = function() {
      var link, seq, _i, _j, _len, _len1, _ref, _ref1;
      if (this.started_seqs()) {
        return;
      }
      _ref = this._links;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        link = _ref[_i];
        if (!link.completed()) {
          return;
        }
      }
      this._started_seqs = true;
      _ref1 = this._seqs;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        seq = _ref1[_j];
        seq.start();
      }
      return this._start_link_seqs();
    };

    Task.prototype.completed = function() {
      return this._completed;
    };

    Task.prototype.is_req = function(task) {
      if (task instanceof Function) {
        task = new Task(task);
      }
      task.req(this);
      return this;
    };

    Task.prototype.link = function(task) {
      if (task instanceof Function) {
        task = new Task(task);
      }
      this._links.push(task);
      task._links.push(this);
      return task;
    };

    Task.prototype.par = function(task) {
      if (task instanceof Function) {
        task = new Task(task);
      }
      this._pars.push(task);
      task._pars.push(this);
      return task;
    };

    Task.prototype.req = function(task) {
      if (task instanceof Function) {
        task = new Task(task);
      }
      this._reqs.push(task);
      return this;
    };

    Task.prototype.seq = function(task) {
      if (task instanceof Function) {
        task = new Task(task);
      }
      this._seqs.push(task);
      return task;
    };

    Task.prototype.start = function() {
      var link, par, req, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      if (this._started) {
        return;
      }
      _ref = this._reqs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        req = _ref[_i];
        if (req._completed === false) {
          req.seq(this);
          return;
        }
      }
      this._started = true;
      this._fn(this._next);
      _ref1 = this._pars;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        par = _ref1[_j];
        par.start();
      }
      _ref2 = this._links;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        link = _ref2[_k];
        _results.push(link.start());
      }
      return _results;
    };

    Task.prototype.started = function() {
      return this._started;
    };

    Task.prototype.started_seqs = function() {
      return this._started_seqs;
    };

    return Task;

  })();

  exports.create = function(task) {
    return new task.Task(task);
  };

  exports.Task = Task;

}).call(this);
