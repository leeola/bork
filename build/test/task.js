// Generated by CoffeeScript 1.3.3
(function() {
  var before, before_each, describe, it, should;

  should = require('should');

  before = global.before;

  before_each = global.beforeEach;

  describe = global.describe;

  it = global.it;

  describe('Task', function() {
    var Task;
    Task = require('../lib/task').Task;
    describe('#constructor', function() {
      describe('with no args', function() {
        var task;
        task = void 0;
        before(function() {
          return task = new Task();
        });
        return it('should create a function of it\'s own', function() {
          return task._fn.should.be.an["instanceof"](Function);
        });
      });
      describe('with a function arg', function() {
        var fn, task;
        task = void 0;
        fn = void 0;
        before(function() {
          fn = function() {};
          return task = new Task(fn);
        });
        return it('should store the given function', function() {
          return task._fn.should.equal(fn);
        });
      });
      return describe('with a task as an arg', function() {
        var arg_task, task;
        task = void 0;
        arg_task = void 0;
        before(function() {
          arg_task = new Task();
          return task = new Task(arg_task);
        });
        return it('should store the arg_task as a seq', function() {
          return task._seqs.should.eql([arg_task]);
        });
      });
    });
    describe('#is_req', function() {
      return describe('with a root task', function() {
        var root;
        root = null;
        before_each(function() {
          return root = new Task();
        });
        return describe('and a isreq task.', function() {
          var isreq;
          isreq = null;
          before_each(function() {
            isreq = new Task();
            return isreq.is_req(root);
          });
          describe('Start the root', function() {
            before_each(function() {
              return root.start();
            });
            it('and it should not show started, completed, or started_seqs', function() {
              root.started().should.be["false"];
              root.completed().should.be["false"];
              return root.started_seqs().should.be["false"];
            });
            it('and isreq should not show started, completed, or started_seqs', function() {
              isreq.started().should.be["false"];
              isreq.completed().should.be["false"];
              return isreq.started_seqs().should.be["false"];
            });
            return describe('and then, start the isreq', function() {
              before_each(function() {
                return isreq.start();
              });
              it('and root should show started, completed, and started_seqs', function() {
                root.started().should.be["true"];
                root.completed().should.be["true"];
                return root.started_seqs().should.be["true"];
              });
              return it('and isreq should show started, completed, and started_seqs', function() {
                isreq.started().should.be["true"];
                isreq.completed().should.be["true"];
                return isreq.started_seqs().should.be["true"];
              });
            });
          });
          return describe('Start the isreq', function() {
            before_each(function() {
              return isreq.start();
            });
            it('and root should not show started, completed, or started_seqs', function() {
              root.started().should.be["false"];
              root.completed().should.be["false"];
              return root.started_seqs().should.be["false"];
            });
            return it('and isreq should show started, completed, and started_seqs', function() {
              isreq.started().should.be["true"];
              isreq.completed().should.be["true"];
              return isreq.started_seqs().should.be["true"];
            });
          });
        });
      });
    });
    describe('#link', function() {
      return describe('with a root task', function() {
        var root;
        root = null;
        before_each(function() {
          return root = new Task();
        });
        return describe('and a link task that doesn\'t complete.', function() {
          var link, next;
          link = next = null;
          before_each(function() {
            link = new Task(function(next_arg) {
              return next = next_arg;
            });
            return root.link(link);
          });
          return describe('Start the root', function() {
            before_each(function() {
              return root.start();
            });
            it('and it should show started and completed, but not started seqs', function() {
              root.started().should.be["true"];
              root.completed().should.be["true"];
              return root.started_seqs().should.be["false"];
            });
            it('and link should show started, not completed, and not started seqs', function() {
              link.started().should.be["true"];
              link.completed().should.be["false"];
              return link.started_seqs().should.be["false"];
            });
            return describe('now complete the link task', function() {
              before_each(function() {
                return next();
              });
              it('root should show started_seqs', function() {
                return root.started_seqs().should.be["true"];
              });
              return it('root should show completed and started_seqs', function() {
                link.completed().should.be["true"];
                return link.started_seqs().should.be["true"];
              });
            });
          });
        });
      });
    });
    describe('#par', function() {
      return describe('root.par to a task that does not complete', function() {
        var par, root;
        root = par = null;
        before_each(function() {
          root = new Task();
          par = new Task(function(next) {});
          return root.par(par);
        });
        it('should store the par-task in @_pars', function() {
          return root._pars.should.eql([par]);
        });
        it('should also store root-task in par-task._pars', function() {
          return par._pars.should.eql([root]);
        });
        describe('and then start root', function() {
          before_each(function() {
            return root.start();
          });
          it('root should show started', function() {
            return root.started().should.be["true"];
          });
          return it('par should show started', function() {
            return root.started().should.be["true"];
          });
        });
        return describe('and then start par', function() {
          before_each(function() {
            return par.start();
          });
          it('root should show started', function() {
            return root.started().should.be["true"];
          });
          return it('par should show started', function() {
            return root.started().should.be["true"];
          });
        });
      });
    });
    describe('#req', function() {
      return describe('with a root task', function() {
        var root;
        root = null;
        before_each(function() {
          return root = new Task();
        });
        return describe('and a req task.', function() {
          var req;
          req = null;
          before_each(function() {
            req = new Task();
            return root.req(req);
          });
          describe('Start the root', function() {
            before_each(function() {
              return root.start();
            });
            it('and it should not show started, completed, or started_seqs', function() {
              root.started().should.be["false"];
              root.completed().should.be["false"];
              return root.started_seqs().should.be["false"];
            });
            it('and req should not show started, completed, or started_seqs', function() {
              req.started().should.be["false"];
              req.completed().should.be["false"];
              return req.started_seqs().should.be["false"];
            });
            return describe('and then, start the req', function() {
              before_each(function() {
                return req.start();
              });
              it('and root should show started, completed, and started_seqs', function() {
                root.started().should.be["true"];
                root.completed().should.be["true"];
                return root.started_seqs().should.be["true"];
              });
              return it('and req should show started, completed, and started_seqs', function() {
                req.started().should.be["true"];
                req.completed().should.be["true"];
                return req.started_seqs().should.be["true"];
              });
            });
          });
          return describe('Start the req', function() {
            before_each(function() {
              return req.start();
            });
            it('and root should not show started, completed, or started_seqs', function() {
              root.started().should.be["false"];
              root.completed().should.be["false"];
              return root.started_seqs().should.be["false"];
            });
            return it('and req should show started, completed, and started_seqs', function() {
              req.started().should.be["true"];
              req.completed().should.be["true"];
              return req.started_seqs().should.be["true"];
            });
          });
        });
      });
    });
    return describe('#seq', function() {
      return describe('With a root task that doesn\'t complete', function() {
        var next, root;
        root = next = null;
        before_each(function() {
          return root = new Task(function(next_arg) {
            return next = next_arg;
          });
        });
        return describe('and a seq task.', function() {
          var seq;
          seq = null;
          before_each(function() {
            seq = new Task();
            return root.seq(seq);
          });
          return describe('Start the root', function() {
            before_each(function() {
              return root.start();
            });
            it('and it should show started but not completed or started_seqs', function() {
              root.started().should.be["true"];
              root.completed().should.be["false"];
              return root.started_seqs().should.be["false"];
            });
            it('and seq should not show started, completed, or started_seqs', function() {
              seq.started().should.be["false"];
              seq.completed().should.be["false"];
              return seq.started_seqs().should.be["false"];
            });
            return describe('and then call the root\'s next()', function() {
              before_each(function() {
                return next();
              });
              it('and root should show started, completed, and started_seqs', function() {
                root.started().should.be["true"];
                root.completed().should.be["true"];
                return root.started_seqs().should.be["true"];
              });
              return it('and seq should show started, completed, and started_seqs', function() {
                seq.started().should.be["true"];
                seq.completed().should.be["true"];
                return seq.started_seqs().should.be["true"];
              });
            });
          });
        });
      });
    });
  });

}).call(this);
